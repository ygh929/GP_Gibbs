dev.new()
trian=get_dens(Dat,metric)#
#
levelplot(y2~base*high, trian, aspect="iso", xlim=c(-0.1,1.1), ylim=c(-0.1,0.96),#
          xlab=NULL, ylab=NULL, contour=TRUE, labels=FALSE, colorkey=TRUE,#
          par.settings=list(axis.line=list(col=NA), axis.text=list(col=NA)))#
trellis.focus("panel", 1, 1, highlight=FALSE)#
panel.segments(c(0,0,0.5), c(0,0,sqrt(3)/2), c(1,1/2,1), c(0,sqrt(3)/2,0))#
grade.trellis()#
panel.text(.9,.45,label="x2",pos=2)#
panel.text(.1,.45,label="x1",pos=4)#
panel.text(.5,-.05,label="x3",pos=1)#
trellis.unfocus()
dev.new()
levelplot(y3~base*high, trian, aspect="iso", xlim=c(-0.1,1.1), ylim=c(-0.1,0.96),#
          xlab=NULL, ylab=NULL, contour=TRUE, labels=FALSE, colorkey=TRUE,#
          par.settings=list(axis.line=list(col=NA), axis.text=list(col=NA)))#
trellis.focus("panel", 1, 1, highlight=FALSE)#
panel.segments(c(0,0,0.5), c(0,0,sqrt(3)/2), c(1,1/2,1), c(0,sqrt(3)/2,0))#
grade.trellis()#
panel.text(.9,.45,label="x2",pos=2)#
panel.text(.1,.45,label="x1",pos=4)#
panel.text(.5,-.05,label="x3",pos=1)#
trellis.unfocus()
Dat
metric=function(x,y){#
	return(abs(x-y)^2)#
}
metric=function(x,y){#
	return(abs(x-y)^2)#
}#
#
## Create function to place grid lines and axis labels on the plot.#
grade.trellis <- function(from=0.2, to=0.8, step=0.2, col=1, lty=2, lwd=0.5){#
  x1 <- seq(from, to, step)#
  x2 <- x1/2#
  y2 <- x1*sqrt(3)/2#
  x3 <- (1-x1)*0.5+x1#
  y3 <- sqrt(3)/2-x1*sqrt(3)/2#
  panel.segments(x1, 0, x2, y2, col=col, lty=lty, lwd=lwd)#
  panel.text(x1, 0, label=x1, pos=1)#
  panel.segments(x1, 0, x3, y3, col=col, lty=lty, lwd=lwd)#
  panel.text(x2, y2, label=rev(x1), pos=2)#
  panel.segments(x2, y2, 1-x2, y2, col=col, lty=lty, lwd=lwd)#
  panel.text(x3, y3, label=rev(x1), pos=4)#
}#
#
#a function to calculate 'likelihood' in 3 different ways#
Dat=c(10,4,6)#
#
get_dens=function(Dat,metric,d=0.01){#
	#Dat has length of 3, the numbers are appearance of ratings=1, 2 and 3#
	#metric is a function of the form f(x,y), which measures the distance between x and y#
	#d is the distance between points in the output#
	#there're 6 columns of outdata first 3 are p1,p2,p3#
	#last 3 are corresponding 'likelihood'#
	trian <- expand.grid(base=seq(0,1,l=100*2), high=seq(0,sin(pi/3),l=87*2))#
	trian <- subset(trian, (base*sin(pi/3)*2)>high)#
	trian <- subset(trian, ((1-base)*sin(pi/3)*2)>high)#
	p2=trian$high*2/sqrt(3)#
    p3=trian$base-trian$high/sqrt(3)#
    p1=1-p3-p2#
    y1=matrix(0,0,1)#
    y2=matrix(0,0,1)#
    y3=matrix(0,0,1)#
    for (i in 1:length(p1)){#
    	p=c(p1[i],p2[i],p3[i])#
    	y1=rbind(y1,l1(Dat,p))#
    	y2=rbind(y2,l2(Dat,metric,p))#
    	y3=rbind(y3,l3(Dat,metric,p))#
    }#
    y1=y1-max(y1)#
    y2=y2-max(y2)#
   	y3=y3-max(y3)#
   	y1=exp(y1)#
   	y2=exp(y2)#
   	y3=exp(y3)#
    trian$y1=y1#
    trian$y2=y2#
    trian$y3=y3#
#
	return(trian)#
}#
#
trian=get_dens(Dat,metric)#
#
levelplot(y2~base*high, trian, aspect="iso", xlim=c(-0.1,1.1), ylim=c(-0.1,0.96),#
          xlab=NULL, ylab=NULL, contour=TRUE, labels=FALSE, colorkey=TRUE,#
          par.settings=list(axis.line=list(col=NA), axis.text=list(col=NA)))#
trellis.focus("panel", 1, 1, highlight=FALSE)#
panel.segments(c(0,0,0.5), c(0,0,sqrt(3)/2), c(1,1/2,1), c(0,sqrt(3)/2,0))#
grade.trellis()#
panel.text(.9,.45,label="x2",pos=2)#
panel.text(.1,.45,label="x1",pos=4)#
panel.text(.5,-.05,label="x3",pos=1)#
trellis.unfocus()
dev.new()
levelplot(y3~base*high, trian, aspect="iso", xlim=c(-0.1,1.1), ylim=c(-0.1,0.96),#
          xlab=NULL, ylab=NULL, contour=TRUE, labels=FALSE, colorkey=TRUE,#
          par.settings=list(axis.line=list(col=NA), axis.text=list(col=NA)))#
trellis.focus("panel", 1, 1, highlight=FALSE)#
panel.segments(c(0,0,0.5), c(0,0,sqrt(3)/2), c(1,1/2,1), c(0,sqrt(3)/2,0))#
grade.trellis()#
panel.text(.9,.45,label="x2",pos=2)#
panel.text(.1,.45,label="x1",pos=4)#
panel.text(.5,-.05,label="x3",pos=1)#
trellis.unfocus()
levelplot(y3~base*high, trian, aspect="iso", xlim=c(-0.1,1.1), ylim=c(-0.1,0.96),#
          xlab=NULL, ylab=NULL, contour=F, labels=FALSE, colorkey=TRUE,#
          par.settings=list(axis.line=list(col=NA), axis.text=list(col=NA)))#
trellis.focus("panel", 1, 1, highlight=FALSE)#
panel.segments(c(0,0,0.5), c(0,0,sqrt(3)/2), c(1,1/2,1), c(0,sqrt(3)/2,0))#
grade.trellis()#
panel.text(.9,.45,label="x2",pos=2)#
panel.text(.1,.45,label="x1",pos=4)#
panel.text(.5,-.05,label="x3",pos=1)#
trellis.unfocus()
levelplot(y3~base*high, trian, aspect="iso", xlim=c(-0.1,1.1), ylim=c(-0.1,1.1),#
          xlab=NULL, ylab=NULL, contour=F, labels=FALSE, colorkey=TRUE,#
          par.settings=list(axis.line=list(col=NA), axis.text=list(col=NA)))
trellis.focus("panel", 1, 1, highlight=FALSE)
panel.segments(c(0,0,0.5), c(0,0,sqrt(3)/2), c(1,1/2,1), c(0,sqrt(3)/2,0))
grade.trellis()
panel.text(.9,.45,label="p2",pos=2)#
panel.text(.1,.45,label="p1",pos=4)#
panel.text(.5,-.05,label="p3",pos=1)#
trellis.unfocus()
I(1!=2)
I(1!=2)*1
metric=function(x,y){#
	return(1*I(x!=y))#
}
trian=get_dens(Dat,metric)
levelplot(y2~base*high, trian, aspect="iso", xlim=c(-0.1,1.1), ylim=c(-0.1,1.1),#
          xlab=NULL, ylab=NULL, contour=F, labels=FALSE, colorkey=TRUE,#
          par.settings=list(axis.line=list(col=NA), axis.text=list(col=NA)))#
trellis.focus("panel", 1, 1, highlight=FALSE)#
panel.segments(c(0,0,0.5), c(0,0,sqrt(3)/2), c(1,1/2,1), c(0,sqrt(3)/2,0))#
grade.trellis()#
panel.text(.9,.45,label="p2",pos=2)#
panel.text(.1,.45,label="p1",pos=4)#
panel.text(.5,-.05,label="p3",pos=1)#
trellis.unfocus()
levelplot(y3~base*high, trian, aspect="iso", xlim=c(-0.1,1.1), ylim=c(-0.1,1.1),#
          xlab=NULL, ylab=NULL, contour=F, labels=FALSE, colorkey=TRUE,#
          par.settings=list(axis.line=list(col=NA), axis.text=list(col=NA)))#
trellis.focus("panel", 1, 1, highlight=FALSE)#
panel.segments(c(0,0,0.5), c(0,0,sqrt(3)/2), c(1,1/2,1), c(0,sqrt(3)/2,0))#
grade.trellis()#
panel.text(.9,.45,label="p2",pos=2)#
panel.text(.1,.45,label="p1",pos=4)#
panel.text(.5,-.05,label="p3",pos=1)#
trellis.unfocus()
levelplot(y1~base*high, trian, aspect="iso", xlim=c(-0.1,1.1), ylim=c(-0.1,1.1),
levelplot(y1~base*high, trian, aspect="iso", xlim=c(-0.1,1.1), ylim=c(-0.1,1.1),#
          xlab=NULL, ylab=NULL, contour=F, labels=FALSE, colorkey=TRUE,#
          par.settings=list(axis.line=list(col=NA), axis.text=list(col=NA)))#
trellis.focus("panel", 1, 1, highlight=FALSE)#
panel.segments(c(0,0,0.5), c(0,0,sqrt(3)/2), c(1,1/2,1), c(0,sqrt(3)/2,0))#
grade.trellis()#
panel.text(.9,.45,label="p2",pos=2)#
panel.text(.1,.45,label="p1",pos=4)#
panel.text(.5,-.05,label="p3",pos=1)#
trellis.unfocus()
levelplot(y2~base*high, trian, aspect="iso", xlim=c(-0.1,1.1), ylim=c(-0.1,1.1),#
          xlab=NULL, ylab=NULL, contour=F, labels=FALSE, colorkey=TRUE,#
          par.settings=list(axis.line=list(col=NA), axis.text=list(col=NA)))#
trellis.focus("panel", 1, 1, highlight=FALSE)#
panel.segments(c(0,0,0.5), c(0,0,sqrt(3)/2), c(1,1/2,1), c(0,sqrt(3)/2,0))#
grade.trellis()#
panel.text(.9,.45,label="p2",pos=2)#
panel.text(.1,.45,label="p1",pos=4)#
panel.text(.5,-.05,label="p3",pos=1)#
trellis.unfocus()
levelplot(y1~base*high, trian, aspect="iso", xlim=c(-0.1,1.1), ylim=c(-0.1,1.1),#
          xlab=NULL, ylab=NULL, contour=F, labels=FALSE, colorkey=TRUE,#
          par.settings=list(axis.line=list(col=NA), axis.text=list(col=NA)))#
trellis.focus("panel", 1, 1, highlight=FALSE)#
panel.segments(c(0,0,0.5), c(0,0,sqrt(3)/2), c(1,1/2,1), c(0,sqrt(3)/2,0))#
grade.trellis()#
panel.text(.9,.45,label="p2",pos=2)#
panel.text(.1,.45,label="p1",pos=4)#
panel.text(.5,-.05,label="p3",pos=1)#
trellis.unfocus()
?levelplot
levelplot(y1~base*high, trian, aspect="iso", xlim=c(-0.1,1.1), ylim=c(-0.1,1.1),#
          xlab=NULL, ylab=NULL, contour=F, labels=FALSE, #
          par.settings=list(axis.line=list(col=NA), axis.text=list(col=NA)))#
trellis.focus("panel", 1, 1, highlight=FALSE)#
panel.segments(c(0,0,0.5), c(0,0,sqrt(3)/2), c(1,1/2,1), c(0,sqrt(3)/2,0))#
grade.trellis()#
panel.text(.9,.45,label="p2",pos=2)#
panel.text(.1,.45,label="p1",pos=4)#
panel.text(.5,-.05,label="p3",pos=1)#
trellis.unfocus()
levelplot(y1~base*high, trian, aspect="iso", xlim=c(-0.1,1.1), ylim=c(-0.1,1.1),#
          xlab=NULL, ylab=NULL, contour=F, labels=FALSE, #
          par.settings=list(axis.line=list(col=NA), axis.text=list(col=NA)),default.theme=standard.theme(color=F))
levelplot(y1~base*high, trian, aspect="iso", xlim=c(-0.1,1.1), ylim=c(-0.1,1.1),#
          xlab=NULL, ylab=NULL, contour=F, labels=FALSE,col.regions=tray(0:100/100)#
          par.settings=list(axis.line=list(col=NA), axis.text=list(col=NA)))
levelplot(y1~base*high, trian, aspect="iso", xlim=c(-0.1,1.1), ylim=c(-0.1,1.1),#
          xlab=NULL, ylab=NULL, contour=F, labels=FALSE,col.regions=gray(0:100/100),#
          par.settings=list(axis.line=list(col=NA), axis.text=list(col=NA)))#
trellis.focus("panel", 1, 1, highlight=FALSE)
levelplot(y1~base*high, trian, aspect="iso", xlim=c(-0.1,1.1), ylim=c(-0.1,1.1),#
          xlab=NULL, ylab=NULL, contour=F, labels=FALSE,#
          par.settings=list(axis.line=list(col=NA), axis.text=list(col=NA)))
levelplot(y1~base*high, trian, aspect="iso", xlim=c(-0.1,1.1), ylim=c(-0.1,1.1),#
          xlab=NULL, ylab=NULL, contour=F, labels=FALSE,col.regions=gray(0:100/100),#
          par.settings=list(axis.line=list(col=NA), axis.text=list(col=NA)))#
trellis.focus("panel", 1, 1, highlight=FALSE)#
panel.segments(c(0,0,0.5), c(0,0,sqrt(3)/2), c(1,1/2,1), c(0,sqrt(3)/2,0))#
grade.trellis()#
panel.text(.9,.45,label="p2",pos=2)#
panel.text(.1,.45,label="p1",pos=4)#
panel.text(.5,-.05,label="p3",pos=1)#
trellis.unfocus()
levelplot(y1~base*high, trian, aspect="iso", xlim=c(-0.1,1.1), ylim=c(-0.1,1.1),#
          xlab=NULL, ylab=NULL, contour=F, labels=FALSE,col.regions=gray(0:100/200),#
          par.settings=list(axis.line=list(col=NA), axis.text=list(col=NA)))#
trellis.focus("panel", 1, 1, highlight=FALSE)#
panel.segments(c(0,0,0.5), c(0,0,sqrt(3)/2), c(1,1/2,1), c(0,sqrt(3)/2,0))#
grade.trellis()#
panel.text(.9,.45,label="p2",pos=2)#
panel.text(.1,.45,label="p1",pos=4)#
panel.text(.5,-.05,label="p3",pos=1)#
trellis.unfocus()
levelplot(y1~base*high, trian, aspect="iso", xlim=c(-0.1,1.1), ylim=c(-0.1,1.1),#
          xlab=NULL, ylab=NULL, contour=F, labels=FALSE,col.regions=gray(0:100/20),#
          par.settings=list(axis.line=list(col=NA), axis.text=list(col=NA)))#
trellis.focus("panel", 1, 1, highlight=FALSE)#
panel.segments(c(0,0,0.5), c(0,0,sqrt(3)/2), c(1,1/2,1), c(0,sqrt(3)/2,0))#
grade.trellis()#
panel.text(.9,.45,label="p2",pos=2)#
panel.text(.1,.45,label="p1",pos=4)#
panel.text(.5,-.05,label="p3",pos=1)#
trellis.unfocus()
levelplot(y1~base*high, trian, aspect="iso", xlim=c(-0.1,1.1), ylim=c(-0.1,1.1),#
          xlab=NULL, ylab=NULL, contour=F, labels=FALSE,col.regions=gray(100:200/200),#
          par.settings=list(axis.line=list(col=NA), axis.text=list(col=NA)))#
trellis.focus("panel", 1, 1, highlight=FALSE)#
panel.segments(c(0,0,0.5), c(0,0,sqrt(3)/2), c(1,1/2,1), c(0,sqrt(3)/2,0))#
grade.trellis()#
panel.text(.9,.45,label="p2",pos=2)#
panel.text(.1,.45,label="p1",pos=4)#
panel.text(.5,-.05,label="p3",pos=1)#
trellis.unfocus()
levelplot(y2~base*high, trian, aspect="iso", xlim=c(-0.1,1.1), ylim=c(-0.1,1.1),#
          xlab=NULL, ylab=NULL, contour=F, labels=FALSE,col.regions=gray(100:200/200),#
          par.settings=list(axis.line=list(col=NA), axis.text=list(col=NA)))#
trellis.focus("panel", 1, 1, highlight=FALSE)#
panel.segments(c(0,0,0.5), c(0,0,sqrt(3)/2), c(1,1/2,1), c(0,sqrt(3)/2,0))#
grade.trellis()#
panel.text(.9,.45,label="p2",pos=2)#
panel.text(.1,.45,label="p1",pos=4)#
panel.text(.5,-.05,label="p3",pos=1)#
trellis.unfocus()
levelplot(y3~base*high, trian, aspect="iso", xlim=c(-0.1,1.1), ylim=c(-0.1,1.1),#
          xlab=NULL, ylab=NULL, contour=F, labels=FALSE,col.regions=gray(100:200/200),#
          par.settings=list(axis.line=list(col=NA), axis.text=list(col=NA)))#
trellis.focus("panel", 1, 1, highlight=FALSE)#
panel.segments(c(0,0,0.5), c(0,0,sqrt(3)/2), c(1,1/2,1), c(0,sqrt(3)/2,0))#
grade.trellis()#
panel.text(.9,.45,label="p2",pos=2)#
panel.text(.1,.45,label="p1",pos=4)#
panel.text(.5,-.05,label="p3",pos=1)#
trellis.unfocus()
levelplot(y1~base*high, trian, aspect="iso", xlim=c(-0.1,1.1), ylim=c(-0.1,1.1),#
          xlab=NULL, ylab=NULL, contour=F, labels=FALSE,col.regions=gray(100:200/200),#
          par.settings=list(axis.line=list(col=NA), axis.text=list(col=NA)))#
trellis.focus("panel", 1, 1, highlight=FALSE)#
panel.segments(c(0,0,0.5), c(0,0,sqrt(3)/2), c(1,1/2,1), c(0,sqrt(3)/2,0))#
grade.trellis()#
panel.text(.9,.45,label="p2",pos=2)#
panel.text(.1,.45,label="p1",pos=4)#
panel.text(.5,-.05,label="p3",pos=1)#
trellis.unfocus()
levelplot(y2~base*high, trian, aspect="iso", xlim=c(-0.1,1.1), ylim=c(-0.1,1.1),#
          xlab=NULL, ylab=NULL, contour=F, labels=FALSE,col.regions=gray(100:200/200),#
          par.settings=list(axis.line=list(col=NA), axis.text=list(col=NA)))#
trellis.focus("panel", 1, 1, highlight=FALSE)#
panel.segments(c(0,0,0.5), c(0,0,sqrt(3)/2), c(1,1/2,1), c(0,sqrt(3)/2,0))#
grade.trellis()#
panel.text(.9,.45,label="p2",pos=2)#
panel.text(.1,.45,label="p1",pos=4)#
panel.text(.5,-.05,label="p3",pos=1)#
trellis.unfocus()
levelplot(y3~base*high, trian, aspect="iso", xlim=c(-0.1,1.1), ylim=c(-0.1,1.1),#
          xlab=NULL, ylab=NULL, contour=F, labels=FALSE,col.regions=gray(100:200/200),#
          par.settings=list(axis.line=list(col=NA), axis.text=list(col=NA)))#
trellis.focus("panel", 1, 1, highlight=FALSE)#
panel.segments(c(0,0,0.5), c(0,0,sqrt(3)/2), c(1,1/2,1), c(0,sqrt(3)/2,0))#
grade.trellis()#
panel.text(.9,.45,label="p2",pos=2)#
panel.text(.1,.45,label="p1",pos=4)#
panel.text(.5,-.05,label="p3",pos=1)#
trellis.unfocus()
levelplot(y3~base*high, trian, aspect="iso", xlim=c(-0.1,1.1), ylim=c(-0.1,1.1),#
          xlab=NULL, ylab=NULL,contour=F,labels=FALSE,col.regions=gray(100:200/200),#
         par.settings=list(axis.line=list(col=NA),axis.text=list(col=NA)),#
         colorkey=list(at=as.numeric(factor(c(seq(from=0,to=1,by=0.2)))),#
         labels=as.character(c("0","0.2","0.4","0.6","0.8","1")))#
         )
levelplot(y3~base*high, trian, aspect="iso", xlim=c(-0.1,1.1), ylim=c(-0.1,1.1),#
          xlab=NULL, ylab=NULL,contour=F,labels=FALSE,col.regions=gray(100:200/200),#
         par.settings=list(axis.line=list(col=NA),axis.text=list(col=NA)),#
         colorkey=list(at=as.numeric(factor(c(seq(from=0,to=1,by=0.2)))),#
         labels=as.character(c("0","0.2","0.4","0.6","0.8","1")))#
         )#
trellis.focus("panel", 1, 1, highlight=FALSE)#
panel.segments(c(0,0,0.5), c(0,0,sqrt(3)/2), c(1,1/2,1), c(0,sqrt(3)/2,0))#
grade.trellis()#
panel.text(.9,.45,label="p2",pos=2)#
panel.text(.1,.45,label="p1",pos=4)#
panel.text(.5,-.05,label="p3",pos=1)#
trellis.unfocus()
levelplot(y3~base*high, trian, aspect="iso", xlim=c(-0.1,1.1), ylim=c(-0.1,1.1),#
          xlab=NULL, ylab=NULL,contour=F,labels=FALSE,col.regions=gray(100:200/200),#
         par.settings=list(axis.line=list(col=NA),axis.text=list(col=NA)),#
         colorkey=list(at=as.numeric(factor(c(seq(from=0,to=1,by=0.2)))),#
         labels=as.character(c("0","0.2","0.4","0.6","0.8","1")))#
         col=graey(sqe(100,200,20)))
levelplot(y3~base*high, trian, aspect="iso", xlim=c(-0.1,1.1), ylim=c(-0.1,1.1),#
          xlab=NULL, ylab=NULL,contour=F,labels=FALSE,col.regions=gray(100:200/200),#
         par.settings=list(axis.line=list(col=NA),axis.text=list(col=NA)),#
         colorkey=list(at=as.numeric(factor(c(seq(from=0,to=1,by=0.2)))),#
         labels=as.character(c("0","0.2","0.4","0.6","0.8","1")),col=graey(sqe(100,200,20)))#
         )
levelplot(y3~base*high, trian, aspect="iso", xlim=c(-0.1,1.1), ylim=c(-0.1,1.1),#
          xlab=NULL, ylab=NULL,contour=F,labels=FALSE,col.regions=gray(100:200/200),#
         par.settings=list(axis.line=list(col=NA),axis.text=list(col=NA)),#
         colorkey=list(at=as.numeric(factor(c(seq(from=0,to=1,by=0.2)))),#
         labels=as.character(c("0","0.2","0.4","0.6","0.8","1")),col=gray(sqe(100,200,20)))#
         )
levelplot(y3~base*high, trian, aspect="iso", xlim=c(-0.1,1.1), ylim=c(-0.1,1.1),#
          xlab=NULL, ylab=NULL,contour=F,labels=FALSE,col.regions=gray(100:200/200),#
         par.settings=list(axis.line=list(col=NA),axis.text=list(col=NA)),#
         colorkey=list(at=as.numeric(factor(c(seq(from=0,to=1,by=0.2)))),#
         labels=as.character(c("0","0.2","0.4","0.6","0.8","1")),col=gray(seq(100,200,20)))#
         )
levelplot(y3~base*high, trian, aspect="iso", xlim=c(-0.1,1.1), ylim=c(-0.1,1.1),#
          xlab=NULL, ylab=NULL,contour=F,labels=FALSE,col.regions=gray(100:200/200),#
         par.settings=list(axis.line=list(col=NA),axis.text=list(col=NA)),#
         colorkey=list(at=as.numeric(factor(c(seq(from=0,to=1,by=0.2)))),#
         labels=as.character(c("0","0.2","0.4","0.6","0.8","1")),col=gray(seq(100,200,20)/200))#
         )
trellis.focus("panel", 1, 1, highlight=FALSE)#
panel.segments(c(0,0,0.5), c(0,0,sqrt(3)/2), c(1,1/2,1), c(0,sqrt(3)/2,0))#
grade.trellis()#
panel.text(.9,.45,label="p2",pos=2)#
panel.text(.1,.45,label="p1",pos=4)#
panel.text(.5,-.05,label="p3",pos=1)#
trellis.unfocus()
levelplot(y3~base*high, trian, aspect="iso", xlim=c(-0.1,1.1), ylim=c(-0.1,1.1),#
          xlab=NULL, ylab=NULL,contour=F,labels=FALSE,#
         par.settings=list(axis.line=list(col=NA),axis.text=list(col=NA)),#
colorkey=list(at=as.numeric(factor(c(seq(from=0,to=1,by=0.2)))),labels=as.character(c("0","0.2","0.4","0.6","0.8","1")),col=gray(seq(100,200,20)/200)))
levelplot(y3~base*high, trian, aspect="iso", xlim=c(-0.1,1.1), ylim=c(-0.1,1.1),#
          xlab=NULL, ylab=NULL,contour=F,labels=FALSE,col.regions=gray(100:200/200),#
         par.settings=list(axis.line=list(col=NA),axis.text=list(col=NA)),#
         colorkey=list(at=seq(0,1,0.2),    labels=as.character(c("0","0.2","0.4","0.6","0.8","1")),col=gray(seq(100,200,20)/200))#
         )
levelplot(y3~base*high, trian, aspect="iso", xlim=c(-0.1,1.1), ylim=c(-0.1,1.1),#
          xlab=NULL, ylab=NULL,contour=F,labels=FALSE,col.regions=gray(100:200/200),#
         par.settings=list(axis.line=list(col=NA),axis.text=list(col=NA)),#
         colorkey=list(at=seq(0,1,0.2),    labels=c("0","0.2","0.4","0.6","0.8","1"),col=gray(seq(100,200,20)/200))#
         )
levelplot(y3~base*high, trian, aspect="iso", xlim=c(-0.1,1.1), ylim=c(-0.1,1.1),#
          xlab=NULL, ylab=NULL,contour=F,labels=FALSE,col.regions=gray(100:200/200),#
         #par.settings=list(axis.line=list(col=NA),axis.text=list(col=NA)),#
         colorkey=list(at=seq(0,1,0.2),    labels=c("0","0.2","0.4","0.6","0.8","1"),col=gray(seq(100,200,20)/200))#
         )
levelplot(y3~base*high, trian, aspect="iso", xlim=c(-0.1,1.1), ylim=c(-0.1,1.1),#
          xlab=NULL, ylab=NULL,contour=F,labels=FALSE,col.regions=gray(100:200/200),#
         par.settings=list(axis.line=list(col=NA),axis.text=list(col=1)),#
         colorkey=list(at=seq(0,1,0.2),    labels=c("0","0.2","0.4","0.6","0.8","1"),col=gray(seq(100,200,20)/200))#
         )
levelplot(y1~base*high, trian, aspect="iso", xlim=c(-0.1,1.1), ylim=c(-0.1,1.1),#
          xlab=NULL, ylab=NULL,contour=F,labels=FALSE,col.regions=gray(100:200/200),#
         par.settings=list(axis.line=list(col=NA),axis.text=list(col=1)),#
         colorkey=list(at=seq(0,1,0.2),    labels=c("0","0.2","0.4","0.6","0.8","1"),col=gray(seq(100,200,20)/200))#
         )
levelplot(y1~base*high, trian, aspect="iso", xlim=c(-0.1,1.1), ylim=c(-0.1,1.1),#
          xlab=NULL, ylab=NULL,contour=F,labels=FALSE,col.regions=gray(100:200/200),#
         par.settings=list(axis.line=list(col=NA),axis.text=list(col=NA)))
trellis.focus("panel", 1, 1, highlight=FALSE)#
panel.segments(c(0,0,0.5), c(0,0,sqrt(3)/2), c(1,1/2,1), c(0,sqrt(3)/2,0))#
grade.trellis()#
panel.text(.9,.45,label="p2",pos=2)#
panel.text(.1,.45,label="p1",pos=4)#
panel.text(.5,-.05,label="p3",pos=1)#
trellis.unfocus()
y1
min(trian$y1)
min(trian$y2)
min(trian$y3)
require(mixexp)#
#
l1=function(Dat,p){#
	#likelihood function#
	l=matrix(Dat,1,3)%*%as.matrix(log(p),1,3)#
	return(l)#
}#
#
l2=function(Dat,metric,p){#
	#expectation of loss function#
	l=-matrix(Dat,1,3)%*%outer(1:3,1:3,metric)%*%as.matrix(p,1,3)#
	return(l)#
}#
#
l3=function(Dat,metric,p){#
	#original loss function#
	rhat=which.max(p)#
	l=-matrix(Dat,1,3)%*%outer(1:3,rhat,metric)#
	return(l)#
}#
#
metric=function(x,y){#
	return((x-y)^2)#
}#
#
## Create function to place grid lines and axis labels on the plot.#
grade.trellis <- function(from=0.2, to=0.8, step=0.2, col=1, lty=2, lwd=0.5){#
  x1 <- seq(from, to, step)#
  x2 <- x1/2#
  y2 <- x1*sqrt(3)/2#
  x3 <- (1-x1)*0.5+x1#
  y3 <- sqrt(3)/2-x1*sqrt(3)/2#
  panel.segments(x1, 0, x2, y2, col=col, lty=lty, lwd=lwd)#
  panel.text(x1, 0, label=x1, pos=1)#
  panel.segments(x1, 0, x3, y3, col=col, lty=lty, lwd=lwd)#
  panel.text(x2, y2, label=rev(x1), pos=2)#
  panel.segments(x2, y2, 1-x2, y2, col=col, lty=lty, lwd=lwd)#
  panel.text(x3, y3, label=rev(x1), pos=4)#
}#
#
#a function to calculate 'likelihood' in 3 different ways#
Dat=c(10,4,6)#
#
get_dens=function(Dat,metric,d=0.01){#
	#Dat has length of 3, the numbers are appearance of ratings=1, 2 and 3#
	#metric is a function of the form f(x,y), which measures the distance between x and y#
	#d is the distance between points in the output#
	#there're 6 columns of outdata first 3 are p1,p2,p3#
	#last 3 are corresponding 'likelihood'#
	trian <- expand.grid(base=seq(0,1,l=100*2), high=seq(0,sin(pi/3),l=87*2))#
	trian <- subset(trian, (base*sin(pi/3)*2)>high)#
	trian <- subset(trian, ((1-base)*sin(pi/3)*2)>high)#
	p2=trian$high*2/sqrt(3)#
    p3=trian$base-trian$high/sqrt(3)#
    p1=1-p3-p2#
    y1=matrix(0,0,1)#
    y2=matrix(0,0,1)#
    y3=matrix(0,0,1)#
    for (i in 1:length(p1)){#
    	p=c(p1[i],p2[i],p3[i])#
    	y1=rbind(y1,l1(Dat,p))#
    	y2=rbind(y2,l2(Dat,metric,p))#
    	y3=rbind(y3,l3(Dat,metric,p))#
    }#
    y1=y1-max(y1)#
    y2=y2-max(y2)#
   	y3=y3-max(y3)#
   	y1=exp(y1)#
   	y2=exp(y2)#
   	y3=exp(y3)#
    trian$y1=y1#
    trian$y2=y2#
    trian$y3=y3#
#
	return(trian)#
}
trian=get_dens(Dat,metric)
levelplot(y1~base*high, trian, aspect="iso", xlim=c(-0.1,1.1), ylim=c(-0.1,1.1),#
          xlab=NULL, ylab=NULL,contour=F,labels=FALSE,col.regions=gray(100:200/200),#
         par.settings=list(axis.line=list(col=NA),axis.text=list(col=NA)))#
trellis.focus("panel", 1, 1, highlight=FALSE)#
panel.segments(c(0,0,0.5), c(0,0,sqrt(3)/2), c(1,1/2,1), c(0,sqrt(3)/2,0))#
grade.trellis()#
panel.text(.9,.45,label="p2",pos=2)#
panel.text(.1,.45,label="p1",pos=4)#
panel.text(.5,-.05,label="p3",pos=1)#
trellis.unfocus()
levelplot(y2~base*high, trian, aspect="iso", xlim=c(-0.1,1.1), ylim=c(-0.1,1.1),#
          xlab=NULL, ylab=NULL,contour=F,labels=FALSE,col.regions=gray(100:200/200),#
         par.settings=list(axis.line=list(col=NA),axis.text=list(col=NA)))#
trellis.focus("panel", 1, 1, highlight=FALSE)#
panel.segments(c(0,0,0.5), c(0,0,sqrt(3)/2), c(1,1/2,1), c(0,sqrt(3)/2,0))#
grade.trellis()#
panel.text(.9,.45,label="p2",pos=2)#
panel.text(.1,.45,label="p1",pos=4)#
panel.text(.5,-.05,label="p3",pos=1)#
trellis.unfocus()
levelplot(y1~base*high, trian, aspect="iso", xlim=c(-0.1,1.1), ylim=c(-0.1,1.1),#
          xlab=NULL, ylab=NULL,contour=F,labels=FALSE,col.regions=gray(50:200/200),#
         par.settings=list(axis.line=list(col=NA),axis.text=list(col=NA)))#
trellis.focus("panel", 1, 1, highlight=FALSE)#
panel.segments(c(0,0,0.5), c(0,0,sqrt(3)/2), c(1,1/2,1), c(0,sqrt(3)/2,0))#
grade.trellis()#
panel.text(.9,.45,label="p2",pos=2)#
panel.text(.1,.45,label="p1",pos=4)#
panel.text(.5,-.05,label="p3",pos=1)#
trellis.unfocus()
levelplot(y2~base*high, trian, aspect="iso", xlim=c(-0.1,1.1), ylim=c(-0.1,1.1),#
          xlab=NULL, ylab=NULL,contour=F,labels=FALSE,col.regions=gray(50:200/200),#
         par.settings=list(axis.line=list(col=NA),axis.text=list(col=NA)))#
trellis.focus("panel", 1, 1, highlight=FALSE)#
panel.segments(c(0,0,0.5), c(0,0,sqrt(3)/2), c(1,1/2,1), c(0,sqrt(3)/2,0))#
grade.trellis()#
panel.text(.9,.45,label="p2",pos=2)#
panel.text(.1,.45,label="p1",pos=4)#
panel.text(.5,-.05,label="p3",pos=1)#
trellis.unfocus()
levelplot(y3~base*high, trian, aspect="iso", xlim=c(-0.1,1.1), ylim=c(-0.1,1.1),#
          xlab=NULL, ylab=NULL,contour=F,labels=FALSE,col.regions=gray(50:200/200),#
         par.settings=list(axis.line=list(col=NA),axis.text=list(col=NA)))#
trellis.focus("panel", 1, 1, highlight=FALSE)#
panel.segments(c(0,0,0.5), c(0,0,sqrt(3)/2), c(1,1/2,1), c(0,sqrt(3)/2,0))#
grade.trellis()#
panel.text(.9,.45,label="p2",pos=2)#
panel.text(.1,.45,label="p1",pos=4)#
panel.text(.5,-.05,label="p3",pos=1)#
trellis.unfocus()
levelplot(y3~base*high, trian, aspect="iso", xlim=c(-0.1,1.1), ylim=c(-0.1,1.1),#
          xlab=NULL, ylab=NULL,contour=F,labels=FALSE,col.regions=gray(50:200/200),#
         par.settings=list(axis.line=list(col=NA),axis.text=list(col=NA)))#
trellis.focus("panel", 1, 1, highlight=FALSE)#
panel.segments(c(0,0,0.5), c(0,0,sqrt(3)/2), c(1,1/2,1), c(0,sqrt(3)/2,0))#
grade.trellis()#
panel.text(.9,.45,label="p2",pos=2)#
panel.text(.1,.45,label="p1",pos=4)#
panel.text(.5,-.,label="p3",pos=1)#
trellis.unfocus()
trian=get_dens(Dat,metric)#
#
levelplot(y3~base*high, trian, aspect="iso", xlim=c(-0.1,1.1), ylim=c(-0.1,1.1),#
          xlab=NULL, ylab=NULL,contour=F,labels=FALSE,col.regions=gray(50:200/200),#
         par.settings=list(axis.line=list(col=NA),axis.text=list(col=NA)))#
trellis.focus("panel", 1, 1, highlight=FALSE)#
panel.segments(c(0,0,0.5), c(0,0,sqrt(3)/2), c(1,1/2,1), c(0,sqrt(3)/2,0))#
grade.trellis()#
panel.text(.9,.45,label="p2",pos=2)#
panel.text(.1,.45,label="p1",pos=4)#
panel.text(.5,0,label="p3",pos=1)#
trellis.unfocus()
levelplot(y2~base*high, trian, aspect="iso", xlim=c(-0.1,1.1), ylim=c(-0.1,1.1),#
          xlab=NULL, ylab=NULL,contour=F,labels=FALSE,col.regions=gray(50:200/200),#
         par.settings=list(axis.line=list(col=NA),axis.text=list(col=NA)))#
trellis.focus("panel", 1, 1, highlight=FALSE)#
panel.segments(c(0,0,0.5), c(0,0,sqrt(3)/2), c(1,1/2,1), c(0,sqrt(3)/2,0))#
grade.trellis()#
panel.text(.9,.45,label="p2",pos=2)#
panel.text(.1,.45,label="p1",pos=4)#
panel.text(.5,0,label="p3",pos=1)#
trellis.unfocus()
levelplot(y1~base*high, trian, aspect="iso", xlim=c(-0.1,1.1), ylim=c(-0.1,1.1),#
          xlab=NULL, ylab=NULL,contour=F,labels=FALSE,col.regions=gray(50:200/200),#
         par.settings=list(axis.line=list(col=NA),axis.text=list(col=NA)))#
trellis.focus("panel", 1, 1, highlight=FALSE)#
panel.segments(c(0,0,0.5), c(0,0,sqrt(3)/2), c(1,1/2,1), c(0,sqrt(3)/2,0))#
grade.trellis()#
panel.text(.9,.45,label="p2",pos=2)#
panel.text(.1,.45,label="p1",pos=4)#
panel.text(.5,0,label="p3",pos=1)#
trellis.unfocus()
vc=6#
eps=0.01#
512*vc/eps^2*log(256*vc/eps^2)
vc=6#
eps=1#
512*vc/eps^2*log(256*vc/eps^2)
vc=6#
eps=1#
n=512*vc/(eps^2)*log(256*vc/(eps^2))#
n^nc#
e^(n*eps^2)/256
vc=6#
eps=1#
n=512*vc/(eps^2)*log(256*vc/(eps^2))#
n^nc#
exp((n*eps^2)/256)
vc=6#
eps=1#
n=512*vc/(eps^2)*log(256*vc/(eps^2))#
n^vc#
exp((n*eps^2)/256)
Dat=read.table("abalone.data",sep=",")#
colnames(Dat)=read.table("abalone.domain",sep=":")$V1#
source("./functions.r")#
y=Dat[,9]#
Dat=Dat[,1:8]#
m=10 #number of pairs in training data#
tm=100 #number of pairs in testing data#
N=100# number of samples in posterior sampling#
#
newDat=samplepairs(m,Dat,y)#
tDat=samplepairs(tm,Dat,y)#
#GP approach_sampling#
x=rbind(newDat$X1,newDat$X2)#
Sig=getSigma(x,kernel1)#
p=ncol(newDat$X1)#
post=list(Y1=NULL,Y2=NULL)#
est=list(Y1=1:m,Y2=1:m)#
i=1#
while (i<=N){#
	Y=mvrnorm(1,rep(0,2*m),Sig)#
	est$Y1=Y[1:m]#
	est$Y2=Y[(m+1):(2*m)]#
	S=losssum(est)#
	temp=runif(1,0,1)#
	if (temp<(exp(-S))){#
		post$Y1=cbind(post$Y1,est$Y1)#
		post$Y2=cbind(post$Y2,est$Y2)#
		i=i+1#
	}#
}#
post_GP=post#
#
err=(1:tm)*0#
for (i in 1:tm){#
	xt=rbind(tDat$X1[i,],tDat$X2[i,])#
	coSig=getcov(xt,x,kernel1)#
	tempY=matrix(NA,nrow=2,ncol=ncol(post$Y1))#
	for (j in 1:ncol(post$Y1)){#
		f=cbind(post$Y1[,j],post$Y2[,j])#
		tempY[,j]=pre_GP(coSig,Sig,f)#
	}#
	err[i]=I(mean(tempY[1,])<mean(tempY[2,]))#
}
setwd(' ~/Desktop/ranking/code/GP_Gibbs')
setwd('~/Desktop/ranking/code/GP_Gibbs')
Dat=read.table("abalone.data",sep=",")#
colnames(Dat)=read.table("abalone.domain",sep=":")$V1#
source("./functions.r")#
y=Dat[,9]#
Dat=Dat[,1:8]#
m=10 #number of pairs in training data#
tm=100 #number of pairs in testing data#
N=100# number of samples in posterior sampling#
#
newDat=samplepairs(m,Dat,y)#
tDat=samplepairs(tm,Dat,y)#
#GP approach_sampling#
x=rbind(newDat$X1,newDat$X2)#
Sig=getSigma(x,kernel1)#
p=ncol(newDat$X1)#
post=list(Y1=NULL,Y2=NULL)#
est=list(Y1=1:m,Y2=1:m)#
i=1#
while (i<=N){#
	Y=mvrnorm(1,rep(0,2*m),Sig)#
	est$Y1=Y[1:m]#
	est$Y2=Y[(m+1):(2*m)]#
	S=losssum(est)#
	temp=runif(1,0,1)#
	if (temp<(exp(-S))){#
		post$Y1=cbind(post$Y1,est$Y1)#
		post$Y2=cbind(post$Y2,est$Y2)#
		i=i+1#
	}#
}#
post_GP=post#
#
err=(1:tm)*0#
for (i in 1:tm){#
	xt=rbind(tDat$X1[i,],tDat$X2[i,])#
	coSig=getcov(xt,x,kernel1)#
	tempY=matrix(NA,nrow=2,ncol=ncol(post$Y1))#
	for (j in 1:ncol(post$Y1)){#
		f=cbind(post$Y1[,j],post$Y2[,j])#
		tempY[,j]=pre_GP(coSig,Sig,f)#
	}#
	err[i]=I(mean(tempY[1,])<mean(tempY[2,]))#
}
mean(err)
Dat=read.table("abalone.data",sep=",")#
colnames(Dat)=read.table("abalone.domain",sep=":")$V1#
source("./functions.r")#
y=Dat[,9]#
Dat=Dat[,1:8]#
m=10 #number of pairs in training data#
tm=100 #number of pairs in testing data#
N=100# number of samples in posterior sampling#
#
newDat=samplepairs(m,Dat,y)#
tDat=samplepairs(tm,Dat,y)#
#GP approach_sampling#
x=rbind(newDat$X1,newDat$X2)#
Sig=getSigma(x,kernel1)#
p=ncol(newDat$X1)#
post=list(Y1=NULL,Y2=NULL)#
est=list(Y1=1:m,Y2=1:m)#
i=1#
while (i<=N){#
	Y=mvrnorm(1,rep(0,2*m),Sig)#
	est$Y1=Y[1:m]#
	est$Y2=Y[(m+1):(2*m)]#
	S=2*losssum(est)#
	temp=runif(1,0,1)#
	if (temp<(exp(-S))){#
		post$Y1=cbind(post$Y1,est$Y1)#
		post$Y2=cbind(post$Y2,est$Y2)#
		i=i+1#
	}#
}#
post_GP=post#
#
err=(1:tm)*0#
for (i in 1:tm){#
	xt=rbind(tDat$X1[i,],tDat$X2[i,])#
	coSig=getcov(xt,x,kernel1)#
	tempY=matrix(NA,nrow=2,ncol=ncol(post$Y1))#
	for (j in 1:ncol(post$Y1)){#
		f=cbind(post$Y1[,j],post$Y2[,j])#
		tempY[,j]=pre_GP(coSig,Sig,f)#
	}#
	err[i]=I(mean(tempY[1,])<mean(tempY[2,]))#
}
mean(err)
m=10 #number of pairs in training data#
tm=100 #number of pairs in testing data#
N=100# number of samples in posterior sampling#
#
newDat=samplepairs(m,Dat,y)#
tDat=samplepairs(tm,Dat,y)#
#GP approach_sampling#
x=rbind(newDat$X1,newDat$X2)#
Sig=getSigma(x,kernel1)#
p=ncol(newDat$X1)#
post=list(Y1=NULL,Y2=NULL)#
est=list(Y1=1:m,Y2=1:m)#
i=1#
while (i<=N){#
	Y=mvrnorm(1,rep(0,2*m),Sig)#
	est$Y1=Y[1:m]#
	est$Y2=Y[(m+1):(2*m)]#
	S=3*losssum(est)#
	temp=runif(1,0,1)#
	if (temp<(exp(-S))){#
		post$Y1=cbind(post$Y1,est$Y1)#
		post$Y2=cbind(post$Y2,est$Y2)#
		i=i+1#
	}#
}#
post_GP=post#
#
err=(1:tm)*0#
for (i in 1:tm){#
	xt=rbind(tDat$X1[i,],tDat$X2[i,])#
	coSig=getcov(xt,x,kernel1)#
	tempY=matrix(NA,nrow=2,ncol=ncol(post$Y1))#
	for (j in 1:ncol(post$Y1)){#
		f=cbind(post$Y1[,j],post$Y2[,j])#
		tempY[,j]=pre_GP(coSig,Sig,f)#
	}#
	err[i]=I(mean(tempY[1,])<mean(tempY[2,]))#
}
newDat=samplepairs(m,Dat,y)#
tDat=samplepairs(tm,Dat,y)#
#GP approach_sampling#
x=rbind(newDat$X1,newDat$X2)#
Sig=getSigma(x,kernel1)#
p=ncol(newDat$X1)#
post=list(Y1=NULL,Y2=NULL)#
est=list(Y1=1:m,Y2=1:m)#
i=1#
while (i<=N){#
	Y=mvrnorm(1,rep(0,2*m),Sig)#
	est$Y1=Y[1:m]#
	est$Y2=Y[(m+1):(2*m)]#
	S=1*losssum(est)#
	temp=runif(1,0,1)#
	if (temp<(exp(-S))){#
		post$Y1=cbind(post$Y1,est$Y1)#
		post$Y2=cbind(post$Y2,est$Y2)#
		i=i+1#
	}#
}#
post_GP=post#
#
err=(1:tm)*0#
for (i in 1:tm){#
	xt=rbind(tDat$X1[i,],tDat$X2[i,])#
	coSig=getcov(xt,x,kernel1)#
	tempY=matrix(NA,nrow=2,ncol=ncol(post$Y1))#
	for (j in 1:ncol(post$Y1)){#
		f=cbind(post$Y1[,j],post$Y2[,j])#
		tempY[,j]=pre_GP(coSig,Sig,f)#
	}#
	err[i]=I(mean(tempY[1,])<mean(tempY[2,]))#
}
mean(err)
m=20 #number of pairs in training data#
tm=100 #number of pairs in testing data#
N=100# number of samples in posterior sampling#
#
newDat=samplepairs(m,Dat,y)#
tDat=samplepairs(tm,Dat,y)#
#GP approach_sampling#
x=rbind(newDat$X1,newDat$X2)#
Sig=getSigma(x,kernel1)#
p=ncol(newDat$X1)#
post=list(Y1=NULL,Y2=NULL)#
est=list(Y1=1:m,Y2=1:m)#
i=1#
while (i<=N){#
	Y=mvrnorm(1,rep(0,2*m),Sig)#
	est$Y1=Y[1:m]#
	est$Y2=Y[(m+1):(2*m)]#
	S=2*losssum(est)#
	temp=runif(1,0,1)#
	if (temp<(exp(-S))){#
		post$Y1=cbind(post$Y1,est$Y1)#
		post$Y2=cbind(post$Y2,est$Y2)#
		i=i+1#
	}#
}#
post_GP=post#
#
err=(1:tm)*0#
for (i in 1:tm){#
	xt=rbind(tDat$X1[i,],tDat$X2[i,])#
	coSig=getcov(xt,x,kernel1)#
	tempY=matrix(NA,nrow=2,ncol=ncol(post$Y1))#
	for (j in 1:ncol(post$Y1)){#
		f=cbind(post$Y1[,j],post$Y2[,j])#
		tempY[,j]=pre_GP(coSig,Sig,f)#
	}#
	err[i]=I(mean(tempY[1,])<mean(tempY[2,]))#
}
m=20 #number of pairs in training data#
tm=100 #number of pairs in testing data#
N=100# number of samples in posterior sampling#
#
newDat=samplepairs(m,Dat,y)#
tDat=samplepairs(tm,Dat,y)#
#GP approach_sampling#
x=rbind(newDat$X1,newDat$X2)#
Sig=getSigma(x,kernel1)#
p=ncol(newDat$X1)#
post=list(Y1=NULL,Y2=NULL)#
est=list(Y1=1:m,Y2=1:m)#
i=1#
while (i<=N){#
	Y=mvrnorm(1,rep(0,2*m),Sig)#
	est$Y1=Y[1:m]#
	est$Y2=Y[(m+1):(2*m)]#
	S=1*losssum(est)#
	temp=runif(1,0,1)#
	if (temp<(exp(-S))){#
		post$Y1=cbind(post$Y1,est$Y1)#
		post$Y2=cbind(post$Y2,est$Y2)#
		i=i+1#
	}#
}#
post_GP=post#
#
err=(1:tm)*0#
for (i in 1:tm){#
	xt=rbind(tDat$X1[i,],tDat$X2[i,])#
	coSig=getcov(xt,x,kernel1)#
	tempY=matrix(NA,nrow=2,ncol=ncol(post$Y1))#
	for (j in 1:ncol(post$Y1)){#
		f=cbind(post$Y1[,j],post$Y2[,j])#
		tempY[,j]=pre_GP(coSig,Sig,f)#
	}#
	err[i]=I(mean(tempY[1,])<mean(tempY[2,]))#
}
mean(er)
mean(err)
Dat=read.table("abalone.data",sep=",")#
colnames(Dat)=read.table("abalone.domain",sep=":")$V1#
source("./functions.r")#
y=Dat[,9]#
Dat=Dat[,1:8]#
m=100 #number of pairs in training data#
tm=100 #number of pairs in testing data#
N=100# number of samples in posterior sampling#
#
newDat=samplepairs(m,Dat,y)#
tDat=samplepairs(tm,Dat,y)#
#GP approach_sampling#
x=rbind(newDat$X1,newDat$X2)#
Sig=getSigma(x,kernel1)#
p=ncol(newDat$X1)#
post=list(Y1=NULL,Y2=NULL)#
est=list(Y1=1:m,Y2=1:m)#
i=1#
while (i<=N){#
	Y=mvrnorm(1,rep(0,2*m),Sig)#
	est$Y1=Y[1:m]#
	est$Y2=Y[(m+1):(2*m)]#
	S=1*losssum(est)#
	temp=runif(1,0,1)#
	if (temp<(exp(-S))){#
		post$Y1=cbind(post$Y1,est$Y1)#
		post$Y2=cbind(post$Y2,est$Y2)#
		i=i+1#
	}#
}#
post_GP=post#
#
err=(1:tm)*0#
for (i in 1:tm){#
	xt=rbind(tDat$X1[i,],tDat$X2[i,])#
	coSig=getcov(xt,x,kernel1)#
	tempY=matrix(NA,nrow=2,ncol=ncol(post$Y1))#
	for (j in 1:ncol(post$Y1)){#
		f=cbind(post$Y1[,j],post$Y2[,j])#
		tempY[,j]=pre_GP(coSig,Sig,f)#
	}#
	err[i]=I(mean(tempY[1,])<mean(tempY[2,]))#
}
Dat=read.table("abalone.data",sep=",")#
colnames(Dat)=read.table("abalone.domain",sep=":")$V1#
source("./functions.r")#
y=Dat[,9]#
Dat=Dat[,1:8]#
m=100 #number of pairs in training data#
tm=100 #number of pairs in testing data#
N=100# number of samples in posterior sampling#
#
newDat=samplepairs(m,Dat,y)#
tDat=samplepairs(tm,Dat,y)#
#GP approach_sampling#
x=rbind(newDat$X1,newDat$X2)#
Sig=getSigma(x,kernel1)#
p=ncol(newDat$X1)#
post=list(Y1=NULL,Y2=NULL)#
est=list(Y1=1:m,Y2=1:m)#
i=1#
while (i<=N){#
	Y=mvrnorm(1,rep(0,2*m),Sig)#
	est$Y1=Y[1:m]#
	est$Y2=Y[(m+1):(2*m)]#
	S=1*losssum(est)#
	temp=runif(1,0,1)#
	if (temp<(exp(-S))){#
		post$Y1=cbind(post$Y1,est$Y1)#
		post$Y2=cbind(post$Y2,est$Y2)#
		i=i+1#
	}#
	print(i)#
}#
post_GP=post#
#
err=(1:tm)*0#
for (i in 1:tm){#
	xt=rbind(tDat$X1[i,],tDat$X2[i,])#
	coSig=getcov(xt,x,kernel1)#
	tempY=matrix(NA,nrow=2,ncol=ncol(post$Y1))#
	for (j in 1:ncol(post$Y1)){#
		f=cbind(post$Y1[,j],post$Y2[,j])#
		tempY[,j]=pre_GP(coSig,Sig,f)#
	}#
	err[i]=I(mean(tempY[1,])<mean(tempY[2,]))#
}
1.25*0.75
MoveonSph=function(pos,sig){#
	p=length(pos)#
	newpos=pos+rnorm(p,0,sig)#
	newpos=newpos/sqrt(sum(newpos^2))#
}
poss=c(1,2,3)
MoveonSph(poss,0.1)
MoveonSph=function(pos,sig){#
	p=length(pos)#
	newpos=pos+rnorm(p,0,sig)#
	newpos=newpos/sqrt(sum(newpos^2))#
	newpos#
}
MoveonSph(poss,0.1)
sum(MoveonSph(poss,0.1)^2)
rm(list=ls())
set.seed(1)#
m <- matrix( sample(12,28,repl=T) , 7 , 4 )
m
m[m[,]==c(4,8,10,3)]
m[m[,1:4]==c(4,8,10,3)]
m[m[,1:4]==c(4,8,10,3),]
m[m[,]==c(4,8,10,3),]
m[m[,1]==0,]
dim(m[m[,1]==0,])
?which
which(m==c(4,8,10,3))
which(m[,]==c(4,8,10,3))
mine <- 1:6#
table.combos <- matrix(data = 1:12, nrow = 10, ncol = 6, byrow)#
row.is.a.match <- apply(table.combos, 1, identical, mine)#
match.idx <- which(row.is.a.match)#
total.matches <- sum(row.is.a.match)
table.combos <- matrix(data = 1:12, nrow = 10, ncol = 6, byrow=T)
table.combos
row.is.a.match<-apply(table.combos,1,identical,mine)
row.is.a.match
?apply
?unique
match.ix=which(row.is.a.match)
match.ix
m=matrix(1:10,5,2)
m
m[6]
m[7]
rm(list=ls())
Dat=read.table("abalone.data",sep=",")#
colnames(Dat)=read.table("abalone.domain",sep=":")$V1#
source("./functions.r")#
y=Dat[,9]#
Dat=Dat[,1:8]
Dat=read.table("abalone.data",sep=",")#
colnames(Dat)=read.table("abalone.domain",sep=":")$V1#
source("./functions.r")#
y=Dat[,9]#
Dat=Dat[,1:8]
m=100 #number of pairs in training data#
tm=100 #number of pairs in testing data#
N=100# number of samples in posterior sampling#
#
newDat=samplepairs(m,Dat,y)
convertDat(newDat)
convertDat<-function(newDat){#
	TDat=rbind(newDat$X1,newDat$X2)#
	Points=unique(TDat)#
	n=nrow(Points)#
	pairs=matrix(NA,nrow=nrow(newDat$X1),ncol=2)#
	for (i in 1:n){#
		temp=Points[i,]#
		row.match=apply(Tdat,1,identical,temp)#
		ind.match=which(row.match)#
		pairs[ind.match]=i#
	}#
	list(points=Points,pairs=pairs)#
}
convertDat(newDat)
convertDat<-function(newDat){#
	TDat=rbind(newDat$X1,newDat$X2)#
	Points=unique(TDat)#
	n=nrow(Points)#
	pairs=matrix(NA,nrow=nrow(newDat$X1),ncol=2)#
	for (i in 1:n){#
		temp=Points[i,]#
		row.match=apply(TDat,1,identical,temp)#
		ind.match=which(row.match)#
		pairs[ind.match]=i#
	}#
	list(points=Points,pairs=pairs)#
}
convertDat(newDat)
Cdat=convertDat(newDat)
P=Cdat$points
P[1]
P[1,]
convertDat<-function(newDat){#
	TDat=rbind(newDat$X1,newDat$X2)#
	Points=unique(TDat)#
	n=nrow(Points)#
	pairs=matrix(NA,nrow=nrow(newDat$X1),ncol=2)#
	for (i in 1:n){#
		temp=Points[i,]#
		row.match=apply(TDat,1,identical,temp)#
		ind.match=which(rownames(TDat)==rownames(temp))#
		pairs[ind.match]=i#
	}#
	list(points=Points,pairs=pairs)#
}
convertDat(newDat)
convertDat<-function(newDat){#
	TDat=rbind(newDat$X1,newDat$X2)#
	Points=unique(TDat)#
	n=nrow(Points)#
	pairs=matrix(NA,nrow=nrow(newDat$X1),ncol=2)#
	for (i in 1:n){#
		temp=Points[i,]#
		row.match=apply(TDat,1,identical,temp)#
		ind.match=which(row.match)#
		print(ind.match)#
		pairs[ind.match]=i#
	}#
	list(points=Points,pairs=pairs)#
}
convertDat(newDat)
convertDat<-function(newDat){#
	TDat=rbind(newDat$X1,newDat$X2)#
	Points=unique(TDat)#
	n=nrow(Points)#
	pairs=matrix(NA,nrow=nrow(newDat$X1),ncol=2)#
	for (i in 1:n){#
		temp=Points[i,]#
		row.match=apply(TDat,1,identical,temp)#
		ind.match=which(row.match)#
		print(row.match)#
		pairs[ind.match]=i#
	}#
	list(points=Points,pairs=pairs)#
}
convertDat(newDat)
TDat=rbind(newDat$X1,newDat$X2)#
	Points=unique(TDat)#
	n=nrow(Points)#
	pairs=matrix(NA,nrow=nrow(newDat$X1),ncol=2)
Points
TDat[1,]
identical(TDat[1,],Points[1,])
convertDat<-function(newDat){#
	TDat=rbind(newDat$X1,newDat$X2)#
	Points=unique(TDat)#
	n=nrow(Points)#
	pairs=matrix(NA,nrow=nrow(newDat$X1),ncol=2)#
	for (i in 1:n){#
		row.match=apply(TDat,1,identical,Points[i,])#
		ind.match=which(row.match)#
		pairs[ind.match]=i#
	}#
	list(points=Points,pairs=pairs)#
}
convertDat(newDat)
i=1
row.match=apply(TDat,1,identical,Points[i,])
row.match
identical(TDat[1,],Points[i,])
row.match=apply(TDat,2,identical,Points[i,])
row.match
row.match=apply(TDat,1,identical,Points[i,])
row.match=lapply(TDat,1,identical,Points[i,])
row.match=apply(TDat,1,identical,Points[i,])
row.match
temp=Points[1,]
temp
apply(TDat,1,identical,temp)
apply(as.matrix(TDat),1,identical,temp)
typeof(Tdat)
typeof(TDat)
typeof(TDat[1,])
typeof(as.matrix(TDat[1,]))
m=as.matrix(TDat)
m
apply(m,1,identical,temp)
m-temp
m
temp
identical(m[1,],temp)
m[1,]
temp
typeof(temp)
identical(m[1,],as.matrix(temp))
as.matrix(temp)
identical(TDat[1,],temp)
apply(m,1,identical,as.double(temp))
m
identical(m[1,],as.double(temp))
m
m[1,]
identical(m[1,],as.matrix(temp))
matrix(temp,nrow=1)
as.matrix(temp)
identical(m[1,],matrix(temp,nrow=1))
identical(matrix(m[1,],nrow=1),matrix(temp,nrow=1))
m[1,]
matrix(m[1,],nrow=1)
temp0=matrix(m[1,],nrow=1)
temp1=matrix(temp,nrow=1)
temp0
temp1
identical(temp0,temp1)
identical(temp0,temp1,ignore.environment=T)
identical(temp0,temp1,attrib.as.set=F)
temp1[9]
temp2[9]
temp0[9]
temp1
temp1[[1]]
temp1[[2]]
typeof(temp1)
typeof(temp2)
typeof(temp0)
as.array(temp1)
temp2=as.array(temp1)
temp2[[1]]
rm(list=ls())
clear
Dat=read.table("abalone.data",sep=",")#
colnames(Dat)=read.table("abalone.domain",sep=":")$V1#
source("./functions.r")#
y=Dat[,9]#
Dat=Dat[,1:8]#
m=100 #number of pairs in training data#
tm=100 #number of pairs in testing data#
N=100# number of samples in posterior sampling#
#
newDat=samplepairs(m,Dat,y)
TDat=rbind(newDat$X1,newDat$X2)#
	Points=unique(TDat)#
	n=nrow(Points)#
	pairs=matrix(NA,nrow=nrow(newDat$X1),ncol=2)
i=1
row.match=apply(TDat,1,identical,Points[i,])
row.match
identical(TDat[1,],Points[i,])
TDat=as.matrix(TDat)#
	Points=as.matirx(Points)
Points=as.matrix(Points)
typeof(TDat)
identical(TDat[1,],Points[i,])
row.match=apply(TDat,1,identical,Points[i,])
row.match
ind.match=which(row.match)#
		pairs[ind.match]=i
pairs
for (i in 1:n){#
		row.match=apply(TDat,1,identical,Points[i,])#
		ind.match=which(row.match)#
		pairs[ind.match]=i#
	}
pairs
rm(list=ls())
Dat=read.table("abalone.data",sep=",")#
colnames(Dat)=read.table("abalone.domain",sep=":")$V1#
source("./functions.r")#
y=Dat[,9]#
Dat=Dat[,1:8]#
m=100 #number of pairs in training data#
tm=100 #number of pairs in testing data#
N=100# number of samples in posterior sampling#
#
newDat=samplepairs(m,Dat,y)
convertDat(newDat)
source("./functions.r")
convertDat(newDat)
pair
p=convertDat(newDat)$pair
p
length(p)
apply(p[,1],1,'<',p[,2])
p
p[,1]>p[,2]
sum(p[,1]<p[,2])
?mvrnorm
mvdnorm
rmvnorm
install('nvtnorm')
library('nvtnorm')
install(nvtnorm)
install.packages("nvtnorm")
library(nvtnorm)
